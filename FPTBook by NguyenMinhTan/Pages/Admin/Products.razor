@page "/admin/products"
@page "/admin"
@inherits OwningComponentBase<IStoreRepository>

<h3> [The list of products] </h3>

<table class="table table-sm table-striped table-bordered">
	<thead>
		<tr>
			<th> ID </th>
			<th> Name </th>
			<th> Category </th>
			<th> Price </th>
			<th> Quantity </th>
			<th> Description </th>
		</tr>
	</thead>
	<tbody>
		@if (ProductData?.Count() > 0)
		{
			@foreach (Product p in ProductData)
			{
				<tr>
					<td> @p.ProductID </td>
					<td> @p.ProductName </td>
					<td> @p.ProductCategory </td>
					<td> @p.ProductPrice.ToString("c") </td>
					<td> @p.ProductQuantity </td>
					<td> @p.ProductDescription </td>
					<td>
						<NavLink class="btn btn-outline-primary btn-sm"
									href="@GetDetailsUrl(p.ProductID ?? 0)">
							View
						</NavLink>
						<NavLink class="btn btn-outline-warning btn-sm"
									href="@GetEditUrl(p.ProductID ?? 0)">
							Modify
						</NavLink>
						<button class="btn btn-outline-danger btn-sm"
									@onclick="@(e => DeleteProduct(p))">
							Remove
						</button>
					</td>
				</tr>
			}
		}

		else
		{
			<tr>
				<td colspan="5" class="text-center"> [No products] </td>
			</tr>
		}
	</tbody>
</table>

<NavLink class="btn btn-dark" href="/admin/products/add">
	+
</NavLink>

@code {
	public IStoreRepository Repository => Service;

	public IEnumerable<Product> ProductData { get; set; } = Enumerable.Empty<Product>();

	protected async override Task OnInitializedAsync()
	{
		await UpdateData();
	}

	public async Task UpdateData()
	{
		ProductData = await Repository.Products.ToListAsync();
	}

	public async Task DeleteProduct(Product p)
	{
		Repository.DeleteProduct(p);
		await UpdateData();
	}

	public string GetDetailsUrl(long id) => $"/admin/products/details/{id}";

	public string GetEditUrl(long id) => $"/admin/products/edit/{id}";
}
